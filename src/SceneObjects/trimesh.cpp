#include "trimesh.h"
#include <assert.h>
#include <float.h>
#include <string.h>
#include <algorithm>
#include <cmath>
#include "../ui/TraceUI.h"

#include <glm/gtx/string_cast.hpp>
#include <iostream>

extern TraceUI* traceUI;

using namespace std;

Trimesh::~Trimesh()
{
	for (auto m : materials)
		delete m;
	for (auto f : faces)
		delete f;
}

// must add vertices, normals, and materials IN ORDER
void Trimesh::addVertex(const glm::dvec3& v)
{
	vertices.emplace_back(v);
}

void Trimesh::addMaterial(Material* m)
{
	materials.emplace_back(m);
}

void Trimesh::addNormal(const glm::dvec3& n)
{
	normals.emplace_back(n);
}

// Returns false if the vertices a,b,c don't all exist
bool Trimesh::addFace(int a, int b, int c)
{
	int vcnt = vertices.size();

	if (a >= vcnt || b >= vcnt || c >= vcnt)
		return false;

	TrimeshFace* newFace = new TrimeshFace(
	        scene, new Material(*this->material), this, a, b, c);
	newFace->setTransform(this->transform);
	if (!newFace->degen)
		faces.push_back(newFace);
	else
		delete newFace;

	// Don't add faces to the scene's object list so we can cull by bounding
	// box
	return true;
}

// Check to make sure that if we have per-vertex materials or normals
// they are the right number.
const char* Trimesh::doubleCheck()
{
	if (!materials.empty() && materials.size() != vertices.size())
		return "Bad Trimesh: Wrong number of materials.";
	if (!normals.empty() && normals.size() != vertices.size())
		return "Bad Trimesh: Wrong number of normals.";

	return 0;
}

bool Trimesh::intersectLocal(ray& r, isect& i) const
{
	bool have_one = false;
	for (auto face : faces) {
		isect cur;
		if (face->intersectLocal(r, cur)) {
			if (!have_one || (cur.getT() < i.getT())) {
				i = cur;
				have_one = true;
				if (this->vertNorms) {
					//printf ("Oh my vert norms? \n");
					//Calculate barycentric interp normals
					i.interpolateBary(normals, (*face)[0], (*face)[1], (*face)[2]);
				}
				if (!materials.empty()) {
					i.interpolateMaterial (materials, (*face)[0], (*face)[1], (*face)[2]);
				}
			}
		}
	}
	if (!have_one)
		i.setT(1000.0);
	return have_one;
}

bool TrimeshFace::intersect(ray& r, isect& i) const
{
	return intersectLocal(r, i);
}

// Intersect ray r with the triangle abc.  If it hits returns true,
// and put the parameter in t and the barycentric coordinates of the
// intersection in u (alpha) and v (beta).
bool TrimeshFace::intersectLocal(ray& r, isect& i) const
{
	// YOUR CODE HERE
	//
	// FIXME: Add ray-trimesh intersection

	//intersect with plane
	if (this->degen) return false;

	glm::dvec3 normal = this->getNormal();
	glm::dvec3 origin = r.getPosition();
	glm::dvec3 dirvec = r.getDirection();

	//cout << glm::to_string (normal) << glm::to_string(origin) << glm::to_string (dirvec) << endl;

	//get point A. should be on the plane.
	glm::dvec3 a_coords = parent->vertices[ids[0]];
	glm::dvec3 b_coords = parent->vertices[ids[1]];
	glm::dvec3 c_coords = parent->vertices[ids[2]];

	double denom = glm::dot(normal, dirvec);
	
	//if denom is 0 then it is parallel to our plane
	if (fabs(denom) <= 1e-6) {
		//cout << "parallel?" << endl;
		return false;
	}
	double time = glm::dot(a_coords - origin, normal) / denom;

	//object behind ray origin
	if (time <= RAY_EPSILON) {
		return false;
	}

	//p1 = a. p2 = b, p3 = c
	glm::dvec3 edgeAB = b_coords-a_coords;
	glm::dvec3 edgeAC = c_coords-a_coords;

	glm::mat2x2 inv(glm::dot (edgeAB, edgeAB),glm::dot(edgeAC,edgeAB),glm::dot(edgeAB, edgeAC),glm::dot(edgeAC, edgeAC));
	glm::dvec3 pos = r.at(time);

	inv = glm::inverse(inv);
	glm::dvec2 uv = inv * glm::dvec2 ( glm::dot(pos-a_coords, edgeAB), glm::dot(pos-a_coords, edgeAC));

	//check if point of intersection within triangle

	// bool ab_line = glm::dot (glm::cross(b_coords - a_coords, pos - a_coords), normal) >= 0;
	// bool bc_line = glm::dot (glm::cross(c_coords - b_coords, pos - b_coords), normal) >= 0;
	// bool ca_line = glm::dot (glm::cross(a_coords - c_coords, pos - c_coords), normal) >= 0;
	
	// if (!ab_line || !bc_line || !ca_line) return false;

	if (uv.x + uv.y >= 1 || uv.x < RAY_EPSILON || uv.y < RAY_EPSILON) {
		return false;
		//printf ("WE HAVE A PROBLEM!\n");
	}
	i.setBary(1 - uv.x - uv.y, uv.x, uv.y);


	i.setObject(this);
	i.setMaterial(this->getMaterial());
	i.setT(time);

	i.setN(normal);
	return true;
}

// Once all the verts and faces are loaded, per vertex normals can be
// generated by averaging the normals of the neighboring faces.
void Trimesh::generateNormals()
{
	int cnt = vertices.size();
	normals.resize(cnt);
	std::vector<int> numFaces(cnt, 0);

	for (auto face : faces) {
		glm::dvec3 faceNormal = face->getNormal();

		for (int i = 0; i < 3; ++i) {
			normals[(*face)[i]] += faceNormal;
			++numFaces[(*face)[i]];
		}
	}

	for (int i = 0; i < cnt; ++i) {
		if (numFaces[i])
			normals[i] /= numFaces[i];
	}

	vertNorms = true;
}

